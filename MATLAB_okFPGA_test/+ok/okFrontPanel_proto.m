function [methodinfo,structs,enuminfo,ThunkLibName]=okFrontPanel_proto
%OKFRONTPANEL_PROTO Create structures to define interfaces found in 'okFrontPanelDLL'.

%This function was generated by loadlibrary.m parser version 1.1.6.37 on Wed Sep 16 12:47:03 2015
%perl options:'okFrontPanelDLL.i -outfile=okFrontPanel_proto.m'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival);
ThunkLibName=[];
%  Bool __stdcall okFrontPanelDLL_LoadLib ( okFP_dll_pchar libname ); 
fcns.name{fcnNum}='okFrontPanelDLL_LoadLib'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanelDLL_FreeLib ( void ); 
fcns.name{fcnNum}='okFrontPanelDLL_FreeLib'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall okFrontPanelDLL_GetVersion ( char * date , char * time ); 
fcns.name{fcnNum}='okFrontPanelDLL_GetVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'cstring', 'cstring'};fcnNum=fcnNum+1;
%  okPLL22393_HANDLE __stdcall okPLL22393_Construct (); 
fcns.name{fcnNum}='okPLL22393_Construct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_Destruct ( okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22393_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_SetCrystalLoad ( okPLL22393_HANDLE pll , double capload ); 
fcns.name{fcnNum}='okPLL22393_SetCrystalLoad'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_SetReference ( okPLL22393_HANDLE pll , double freq ); 
fcns.name{fcnNum}='okPLL22393_SetReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22393_GetReference ( okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22393_GetReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_SetPLLParameters ( okPLL22393_HANDLE pll , int n , int p , int q , Bool enable ); 
fcns.name{fcnNum}='okPLL22393_SetPLLParameters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'int32', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_SetPLLLF ( okPLL22393_HANDLE pll , int n , int lf ); 
fcns.name{fcnNum}='okPLL22393_SetPLLLF'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_SetOutputDivider ( okPLL22393_HANDLE pll , int n , int div ); 
fcns.name{fcnNum}='okPLL22393_SetOutputDivider'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_SetOutputSource ( okPLL22393_HANDLE pll , int n , ok_ClockSource_22393 clksrc ); 
fcns.name{fcnNum}='okPLL22393_SetOutputSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ok_ClockSource_22393'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_SetOutputEnable ( okPLL22393_HANDLE pll , int n , Bool enable ); 
fcns.name{fcnNum}='okPLL22393_SetOutputEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22393_GetPLLP ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetPLLP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22393_GetPLLQ ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetPLLQ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22393_GetPLLFrequency ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetPLLFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22393_GetOutputDivider ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetOutputDivider'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  ok_ClockSource_22393 __stdcall okPLL22393_GetOutputSource ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetOutputSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ClockSource_22393'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22393_GetOutputFrequency ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_GetOutputFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_IsOutputEnabled ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_IsOutputEnabled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22393_IsPLLEnabled ( okPLL22393_HANDLE pll , int n ); 
fcns.name{fcnNum}='okPLL22393_IsPLLEnabled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_InitFromProgrammingInfo ( okPLL22393_HANDLE pll , unsigned char * buf ); 
fcns.name{fcnNum}='okPLL22393_InitFromProgrammingInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22393_GetProgrammingInfo ( okPLL22393_HANDLE pll , unsigned char * buf ); 
fcns.name{fcnNum}='okPLL22393_GetProgrammingInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
%  okPLL22150_HANDLE __stdcall okPLL22150_Construct (); 
fcns.name{fcnNum}='okPLL22150_Construct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_Destruct ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetCrystalLoad ( okPLL22150_HANDLE pll , double capload ); 
fcns.name{fcnNum}='okPLL22150_SetCrystalLoad'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'double'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetReference ( okPLL22150_HANDLE pll , double freq , Bool extosc ); 
fcns.name{fcnNum}='okPLL22150_SetReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'double', 'int32'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22150_GetReference ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetReference'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22150_SetVCOParameters ( okPLL22150_HANDLE pll , int p , int q ); 
fcns.name{fcnNum}='okPLL22150_SetVCOParameters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22150_GetVCOP ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetVCOP'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22150_GetVCOQ ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetVCOQ'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22150_GetVCOFrequency ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetVCOFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetDiv1 ( okPLL22150_HANDLE pll , ok_DividerSource divsrc , int n ); 
fcns.name{fcnNum}='okPLL22150_SetDiv1'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ok_DividerSource', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetDiv2 ( okPLL22150_HANDLE pll , ok_DividerSource divsrc , int n ); 
fcns.name{fcnNum}='okPLL22150_SetDiv2'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ok_DividerSource', 'int32'};fcnNum=fcnNum+1;
%  ok_DividerSource __stdcall okPLL22150_GetDiv1Source ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetDiv1Source'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_DividerSource'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_DividerSource __stdcall okPLL22150_GetDiv2Source ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetDiv2Source'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_DividerSource'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22150_GetDiv1Divider ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetDiv1Divider'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  int __stdcall okPLL22150_GetDiv2Divider ( okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okPLL22150_GetDiv2Divider'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetOutputSource ( okPLL22150_HANDLE pll , int output , ok_ClockSource_22150 clksrc ); 
fcns.name{fcnNum}='okPLL22150_SetOutputSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32', 'ok_ClockSource_22150'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_SetOutputEnable ( okPLL22150_HANDLE pll , int output , Bool enable ); 
fcns.name{fcnNum}='okPLL22150_SetOutputEnable'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  ok_ClockSource_22150 __stdcall okPLL22150_GetOutputSource ( okPLL22150_HANDLE pll , int output ); 
fcns.name{fcnNum}='okPLL22150_GetOutputSource'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ClockSource_22150'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  double __stdcall okPLL22150_GetOutputFrequency ( okPLL22150_HANDLE pll , int output ); 
fcns.name{fcnNum}='okPLL22150_GetOutputFrequency'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='double'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  Bool __stdcall okPLL22150_IsOutputEnabled ( okPLL22150_HANDLE pll , int output ); 
fcns.name{fcnNum}='okPLL22150_IsOutputEnabled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_InitFromProgrammingInfo ( okPLL22150_HANDLE pll , unsigned char * buf ); 
fcns.name{fcnNum}='okPLL22150_InitFromProgrammingInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
%  void __stdcall okPLL22150_GetProgrammingInfo ( okPLL22150_HANDLE pll , unsigned char * buf ); 
fcns.name{fcnNum}='okPLL22150_GetProgrammingInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr'};fcnNum=fcnNum+1;
%  okDeviceSettings_HANDLE __stdcall okDeviceSettings_Construct (); 
fcns.name{fcnNum}='okDeviceSettings_Construct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='okDeviceSettingsHandlePtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall okDeviceSettings_Destruct ( okDeviceSettings_HANDLE hnd ); 
fcns.name{fcnNum}='okDeviceSettings_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_GetString ( okDeviceSettings_HANDLE hnd , const char * key , int length , char * buf ); 
fcns.name{fcnNum}='okDeviceSettings_GetString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr', 'cstring', 'int32', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_SetString ( okDeviceSettings_HANDLE hnd , const char * key , const char * buf ); 
fcns.name{fcnNum}='okDeviceSettings_SetString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr', 'cstring', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_GetInt ( okDeviceSettings_HANDLE hnd , const char * key , UINT32 * value ); 
fcns.name{fcnNum}='okDeviceSettings_GetInt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_SetInt ( okDeviceSettings_HANDLE hnd , const char * key , UINT32 value ); 
fcns.name{fcnNum}='okDeviceSettings_SetInt'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr', 'cstring', 'uint32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_Delete ( okDeviceSettings_HANDLE hnd , const char * key ); 
fcns.name{fcnNum}='okDeviceSettings_Delete'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okDeviceSettings_Save ( okDeviceSettings_HANDLE hnd ); 
fcns.name{fcnNum}='okDeviceSettings_Save'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okDeviceSettingsHandlePtr'};fcnNum=fcnNum+1;
%  okFirmwarePackage_HANDLE __stdcall okFirmwarePackage_Load ( const char * filename ); 
fcns.name{fcnNum}='okFirmwarePackage_Load'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='okFirmwarePackageHandlePtr'; fcns.RHS{fcnNum}={'cstring'};fcnNum=fcnNum+1;
%  void __stdcall okFirmwarePackage_Destruct ( okFirmwarePackage_HANDLE hnd ); 
fcns.name{fcnNum}='okFirmwarePackage_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'okFirmwarePackageHandlePtr'};fcnNum=fcnNum+1;
%  int __stdcall okFirmwarePackage_GetFirmwareCount ( okFirmwarePackage_HANDLE hnd ); 
fcns.name{fcnNum}='okFirmwarePackage_GetFirmwareCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'okFirmwarePackageHandlePtr'};fcnNum=fcnNum+1;
%  okFirmware_HANDLE __stdcall okFirmwarePackage_GetFirmware ( okFirmwarePackage_HANDLE hnd , int num ); 
fcns.name{fcnNum}='okFirmwarePackage_GetFirmware'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='okFirmwareHandlePtr'; fcns.RHS{fcnNum}={'okFirmwarePackageHandlePtr', 'int32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFirmware_PerformTasks ( okFirmware_HANDLE hnd , const char * serial , okFirmware_PerformTasks_Callback callback , void * arg ); 
fcns.name{fcnNum}='okFirmware_PerformTasks'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okFirmwareHandlePtr', 'cstring', 'FcnPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  okFrontPanel_HANDLE __stdcall okFrontPanel_Construct (); 
fcns.name{fcnNum}='okFrontPanel_Construct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_Destruct ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_WriteI2C ( okFrontPanel_HANDLE hnd , const int addr , int length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_WriteI2C'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ReadI2C ( okFrontPanel_HANDLE hnd , const int addr , int length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_ReadI2C'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_FlashEraseSector ( okFrontPanel_HANDLE hnd , UINT32 address ); 
fcns.name{fcnNum}='okFrontPanel_FlashEraseSector'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_FlashWrite ( okFrontPanel_HANDLE hnd , UINT32 address , UINT32 length , const UINT8 * buf ); 
fcns.name{fcnNum}='okFrontPanel_FlashWrite'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_FlashRead ( okFrontPanel_HANDLE hnd , UINT32 address , UINT32 length , UINT8 * buf ); 
fcns.name{fcnNum}='okFrontPanel_FlashRead'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32', 'uint8Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ReadRegister ( okFrontPanel_HANDLE hnd , UINT32 addr , UINT32 * data ); 
fcns.name{fcnNum}='okFrontPanel_ReadRegister'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ReadRegisters ( okFrontPanel_HANDLE hnd , unsigned num , okTRegisterEntry * regs ); 
fcns.name{fcnNum}='okFrontPanel_ReadRegisters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'okTRegisterEntryPtr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_WriteRegister ( okFrontPanel_HANDLE hnd , UINT32 addr , UINT32 data ); 
fcns.name{fcnNum}='okFrontPanel_WriteRegister'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'uint32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_WriteRegisters ( okFrontPanel_HANDLE hnd , unsigned num , const okTRegisterEntry * regs ); 
fcns.name{fcnNum}='okFrontPanel_WriteRegisters'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint32', 'okTRegisterEntryPtr'};fcnNum=fcnNum+1;
%  int __stdcall okFrontPanel_GetHostInterfaceWidth ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetHostInterfaceWidth'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okFrontPanel_IsHighSpeed ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_IsHighSpeed'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_BoardModel __stdcall okFrontPanel_GetBoardModel ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetBoardModel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_BoardModel'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_GetBoardModelString ( okFrontPanel_HANDLE hnd , ok_BoardModel m , char * buf ); 
fcns.name{fcnNum}='okFrontPanel_GetBoardModelString'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'ok_BoardModel', 'cstring'};fcnNum=fcnNum+1;
%  int __stdcall okFrontPanel_GetDeviceCount ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceCount'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_BoardModel __stdcall okFrontPanel_GetDeviceListModel ( okFrontPanel_HANDLE hnd , int num ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceListModel'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_BoardModel'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_GetDeviceListSerial ( okFrontPanel_HANDLE hnd , int num , char * buf ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceListSerial'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_OpenBySerial ( okFrontPanel_HANDLE hnd , const char * serial ); 
fcns.name{fcnNum}='okFrontPanel_OpenBySerial'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
%  Bool __stdcall okFrontPanel_IsOpen ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_IsOpen'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_EnableAsynchronousTransfers ( okFrontPanel_HANDLE hnd , Bool enable ); 
fcns.name{fcnNum}='okFrontPanel_EnableAsynchronousTransfers'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetBTPipePollingInterval ( okFrontPanel_HANDLE hnd , int interval ); 
fcns.name{fcnNum}='okFrontPanel_SetBTPipePollingInterval'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_SetTimeout ( okFrontPanel_HANDLE hnd , int timeout ); 
fcns.name{fcnNum}='okFrontPanel_SetTimeout'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  int __stdcall okFrontPanel_GetDeviceMajorVersion ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceMajorVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  int __stdcall okFrontPanel_GetDeviceMinorVersion ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceMinorVersion'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ResetFPGA ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_ResetFPGA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_Close ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_Close'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_GetSerialNumber ( okFrontPanel_HANDLE hnd , char * buf ); 
fcns.name{fcnNum}='okFrontPanel_GetSerialNumber'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetDeviceSettings ( okFrontPanel_HANDLE hnd , okDeviceSettings_HANDLE settings ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceSettings'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'okDeviceSettingsHandlePtr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetDeviceInfo ( okFrontPanel_HANDLE hnd , okTDeviceInfo * info ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceInfo'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'okTDeviceInfoPtr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetDeviceInfoWithSize ( okFrontPanel_HANDLE hnd , okTDeviceInfo * info , unsigned size ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceInfoWithSize'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'okTDeviceInfoPtr', 'uint32'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_GetDeviceID ( okFrontPanel_HANDLE hnd , char * buf ); 
fcns.name{fcnNum}='okFrontPanel_GetDeviceID'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_SetDeviceID ( okFrontPanel_HANDLE hnd , const char * strID ); 
fcns.name{fcnNum}='okFrontPanel_SetDeviceID'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ConfigureFPGA ( okFrontPanel_HANDLE hnd , const char * strFilename ); 
fcns.name{fcnNum}='okFrontPanel_ConfigureFPGA'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'cstring'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ConfigureFPGAFromMemory ( okFrontPanel_HANDLE hnd , unsigned char * data , unsigned long length ); 
fcns.name{fcnNum}='okFrontPanel_ConfigureFPGAFromMemory'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'uint8Ptr', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetPLL22150Configuration ( okFrontPanel_HANDLE hnd , okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_GetPLL22150Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetPLL22150Configuration ( okFrontPanel_HANDLE hnd , okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_SetPLL22150Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetEepromPLL22150Configuration ( okFrontPanel_HANDLE hnd , okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_GetEepromPLL22150Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetEepromPLL22150Configuration ( okFrontPanel_HANDLE hnd , okPLL22150_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_SetEepromPLL22150Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetPLL22393Configuration ( okFrontPanel_HANDLE hnd , okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_GetPLL22393Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetPLL22393Configuration ( okFrontPanel_HANDLE hnd , okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_SetPLL22393Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetEepromPLL22393Configuration ( okFrontPanel_HANDLE hnd , okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_GetEepromPLL22393Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetEepromPLL22393Configuration ( okFrontPanel_HANDLE hnd , okPLL22393_HANDLE pll ); 
fcns.name{fcnNum}='okFrontPanel_SetEepromPLL22393Configuration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_LoadDefaultPLLConfiguration ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_LoadDefaultPLLConfiguration'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okFrontPanel_IsFrontPanelEnabled ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_IsFrontPanelEnabled'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okFrontPanel_IsFrontPanel3Supported ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_IsFrontPanel3Supported'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_UpdateWireIns ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_UpdateWireIns'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_GetWireInValue ( okFrontPanel_HANDLE hnd , int epAddr , UINT32 * val ); 
fcns.name{fcnNum}='okFrontPanel_GetWireInValue'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32', 'uint32Ptr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_SetWireInValue ( okFrontPanel_HANDLE hnd , int ep , unsigned long val , unsigned long mask ); 
fcns.name{fcnNum}='okFrontPanel_SetWireInValue'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong', 'ulong'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_UpdateWireOuts ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_UpdateWireOuts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  unsigned long __stdcall okFrontPanel_GetWireOutValue ( okFrontPanel_HANDLE hnd , int epAddr ); 
fcns.name{fcnNum}='okFrontPanel_GetWireOutValue'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'ulong', 'int32'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanel_ActivateTriggerIn ( okFrontPanel_HANDLE hnd , int epAddr , int bit ); 
fcns.name{fcnNum}='okFrontPanel_ActivateTriggerIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanel_UpdateTriggerOuts ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_UpdateTriggerOuts'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  Bool __stdcall okFrontPanel_IsTriggered ( okFrontPanel_HANDLE hnd , int epAddr , unsigned long mask ); 
fcns.name{fcnNum}='okFrontPanel_IsTriggered'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'ulong', 'int32', 'ulong'};fcnNum=fcnNum+1;
%  long __stdcall okFrontPanel_GetLastTransferLength ( okFrontPanel_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanel_GetLastTransferLength'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong'};fcnNum=fcnNum+1;
%  long __stdcall okFrontPanel_WriteToPipeIn ( okFrontPanel_HANDLE hnd , int epAddr , long length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_WriteToPipeIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'int32', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  long __stdcall okFrontPanel_ReadFromPipeOut ( okFrontPanel_HANDLE hnd , int epAddr , long length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_ReadFromPipeOut'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'int32', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  long __stdcall okFrontPanel_WriteToBlockPipeIn ( okFrontPanel_HANDLE hnd , int epAddr , int blockSize , long length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_WriteToBlockPipeIn'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  long __stdcall okFrontPanel_ReadFromBlockPipeOut ( okFrontPanel_HANDLE hnd , int epAddr , int blockSize , long length , unsigned char * data ); 
fcns.name{fcnNum}='okFrontPanel_ReadFromBlockPipeOut'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='long'; fcns.RHS{fcnNum}={'ulong', 'int32', 'int32', 'long', 'uint8Ptr'};fcnNum=fcnNum+1;
%  okCFrontPanelManager_HANDLE __stdcall okFrontPanelManager_Construct ( okFrontPanelManager_HANDLE self ); 
fcns.name{fcnNum}='okFrontPanelManager_Construct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='okCFrontPanelManagerHandlePtr'; fcns.RHS{fcnNum}={'okFrontPanelManagerHandlePtr'};fcnNum=fcnNum+1;
%  void __stdcall okFrontPanelManager_Destruct ( okCFrontPanelManager_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanelManager_Destruct'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'okCFrontPanelManagerHandlePtr'};fcnNum=fcnNum+1;
%  ok_ErrorCode __stdcall okFrontPanelManager_StartMonitoring ( okCFrontPanelManager_HANDLE hnd ); 
fcns.name{fcnNum}='okFrontPanelManager_StartMonitoring'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ok_ErrorCode'; fcns.RHS{fcnNum}={'okCFrontPanelManagerHandlePtr'};fcnNum=fcnNum+1;
%  okFrontPanel_HANDLE __stdcall okFrontPanelManager_Open ( okCFrontPanelManager_HANDLE hnd , const char * serial ); 
fcns.name{fcnNum}='okFrontPanelManager_Open'; fcns.calltype{fcnNum}='stdcall'; fcns.LHS{fcnNum}='ulong'; fcns.RHS{fcnNum}={'okCFrontPanelManagerHandlePtr', 'cstring'};fcnNum=fcnNum+1;
structs.okDeviceSettingsHandle.members=struct('');
structs.okFirmwareHandle.members=struct('');
structs.okFirmwarePackageHandle.members=struct('');
structs.okFrontPanelManagerHandle.members=struct('');
structs.okCFrontPanelManagerHandle.members=struct('');
structs.okTRegisterEntry.members=struct('address', 'uint32', 'data', 'uint32');
structs.okTTriggerEntry.members=struct('address', 'uint32', 'mask', 'uint32');
structs.okTFPGAResetProfile.members=struct('magic', 'uint32', 'configFileLocation', 'uint32', 'configFileLength', 'uint32', 'doneWaitUS', 'uint32', 'resetWaitUS', 'uint32', 'registerWaitUS', 'uint32', 'padBytes1', 'uint32#28', 'wireInValues', 'uint32#32', 'registerEntryCount', 'uint32', 'registerEntries', 'okTRegisterEntry#256', 'triggerEntryCount', 'uint32', 'triggerEntries', 'okTTriggerEntry#32', 'padBytes2', 'uint8#1520');
structs.okTFlashLayout.members=struct('sectorCount', 'uint32', 'sectorSize', 'uint32', 'pageSize', 'uint32', 'minUserSector', 'uint32', 'maxUserSector', 'uint32');
structs.okTDeviceInfo.members=struct('deviceID', 'int8#33', 'serialNumber', 'int8#11', 'productName', 'int8#128', 'productID', 'int32', 'deviceInterface', 'int32', 'usbSpeed', 'int32', 'deviceMajorVersion', 'int32', 'deviceMinorVersion', 'int32', 'hostInterfaceMajorVersion', 'int32', 'hostInterfaceMinorVersion', 'int32', 'isPLL22150Supported', 'int8', 'isPLL22393Supported', 'int8', 'isFrontPanelEnabled', 'int8', 'wireWidth', 'int32', 'triggerWidth', 'int32', 'pipeWidth', 'int32', 'registerAddressWidth', 'int32', 'registerDataWidth', 'int32', 'flashSystem', 'okTFlashLayout', 'flashFPGA', 'okTFlashLayout', 'hasFMCEEPROM', 'int8');
enuminfo.ok_ClockSource_22393=struct('ok_ClkSrc22393_Ref',0,'ok_ClkSrc22393_PLL0_0',2,'ok_ClkSrc22393_PLL0_180',3,'ok_ClkSrc22393_PLL1_0',4,'ok_ClkSrc22393_PLL1_180',5,'ok_ClkSrc22393_PLL2_0',6,'ok_ClkSrc22393_PLL2_180',7);
enuminfo.okEFPGAConfigurationMethod=struct('ok_FPGAConfigurationMethod_NVRAM',0,'ok_FPGAConfigurationMethod_JTAG',1);
enuminfo.ok_DividerSource=struct('ok_DivSrc_Ref',0,'ok_DivSrc_VCO',1);
enuminfo.ok_ErrorCode=struct('ok_NoError',0,'ok_Failed',-1,'ok_Timeout',-2,'ok_DoneNotHigh',-3,'ok_TransferError',-4,'ok_CommunicationError',-5,'ok_InvalidBitstream',-6,'ok_FileError',-7,'ok_DeviceNotOpen',-8,'ok_InvalidEndpoint',-9,'ok_InvalidBlockSize',-10,'ok_I2CRestrictedAddress',-11,'ok_I2CBitError',-12,'ok_I2CNack',-13,'ok_I2CUnknownStatus',-14,'ok_UnsupportedFeature',-15,'ok_FIFOUnderflow',-16,'ok_FIFOOverflow',-17,'ok_DataAlignmentError',-18,'ok_InvalidResetProfile',-19,'ok_InvalidParameter',-20);
enuminfo.ok_ClockSource_22150=struct('ok_ClkSrc22150_Ref',0,'ok_ClkSrc22150_Div1ByN',1,'ok_ClkSrc22150_Div1By2',2,'ok_ClkSrc22150_Div1By3',3,'ok_ClkSrc22150_Div2ByN',4,'ok_ClkSrc22150_Div2By2',5,'ok_ClkSrc22150_Div2By4',6);
enuminfo.ok_BoardModel=struct('ok_brdUnknown',0,'ok_brdXEM3001v1',1,'ok_brdXEM3001v2',2,'ok_brdXEM3010',3,'ok_brdXEM3005',4,'ok_brdXEM3001CL',5,'ok_brdXEM3020',6,'ok_brdXEM3050',7,'ok_brdXEM9002',8,'ok_brdXEM3001RB',9,'ok_brdXEM5010',10,'ok_brdXEM6110LX45',11,'ok_brdXEM6110LX150',15,'ok_brdXEM6001',12,'ok_brdXEM6010LX45',13,'ok_brdXEM6010LX150',14,'ok_brdXEM6006LX9',16,'ok_brdXEM6006LX16',17,'ok_brdXEM6006LX25',18,'ok_brdXEM5010LX110',19,'ok_brdZEM4310',20,'ok_brdXEM6310LX45',21,'ok_brdXEM6310LX150',22,'ok_brdXEM6110v2LX45',23,'ok_brdXEM6110v2LX150',24,'ok_brdXEM6002LX9',25,'ok_brdXEM6310MTLX45T',26,'ok_brdXEM6320LX130T',27,'ok_brdXEM7350K70T',28,'ok_brdXEM7350K160T',29,'ok_brdXEM7350K410T',30);
methodinfo=fcns;