/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"

void print(char *str);

int main()
{
    init_platform();

    print("Hello World\n\r");

    static XIntc intc;
    static XSpi spi;
    static XSpi_Config* configptr;

    OKTRIGGERINS_Initialize(XPAR_OKTRIGGERINS_0_BASEADDR);
    OKTRIGGERINS_RegisterHandler(0, 0x01, transmit_spi, &message);
    OKTRIGGERINS_SetInterruptMask(0, 0x01);

    configptr = XSpi_LookupConfig(XPAR_SPI_0_DEVICE_ID);
    configptr->SlaveOnly = 0;
    configptr->Use_Startup = 1;
    XSpi_CfgInitialize(&spi, configptr, configptr->BaseAddress);
    XSpi_SetStatusHandler(&spi, outbuffer, spi_status_handler);
    XSpi_SetOptions(&spi, XSP_MASTER_OPTION | XSP_MANUAL_SSELECT_OPTION);
    XSpi_SetSlaveSelect(&spi, 0x01);
    XSpi_Start(&spi);

    XIntc_Initialize(&intc, XPAR_AXI_INTC_0_DEVICE_ID);
    XIntc_Connect (&intc, XPAR_INTC_0_SPI_0_VEC_ID, XSpi_InterruptHandler, &spi);
    XIntc_Connect (&intc, XPAR_INTC_0_OKTRIGGERINS_0_VEC_ID, OKTRIGGERINS_Handler, NULL);
    XIntc_Start(&intc, XIN_REAL_MODE);
    XIntc_Enable(&intc, XPAR_INTC_0_SPI_0_VEC_ID);
    XIntc_Enable(&intc, XPAR_INTC_0_OKTRIGGERINS_0_VEC_ID);

    Xil_ExceptionInit();
    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT, XIntc_InterruptHandler, &intc);
    Xil_ExceptionEnable();
    return 0;
}
